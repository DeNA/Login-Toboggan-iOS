//
//  MBMobage.h
//  mobage-ndk
//
//  Created by Frederic Barthelemy on 2/28/12.
//  Copyright (c) 2012 ngmoco:). All rights reserved.
//

#import <Foundation/Foundation.h>
#import "MBInterfaceEnums.h"
#import "MBError.h"
#import "MBEventReporter.h"

// doxygen includes the following content in index.html
/**
 * @mainpage notitle
 * @section welcome Welcome!
 * Welcome to the Mobage Native SDK for iOS! The Native SDK connects your app to Mobage, the premier
 * social gaming platform for smartphones. Mobage connects your users to a huge community of
 * fun-seekers that circles the globe. With the Native SDK, you can sell virtual items to users,
 * harness Mobage's powerful analytics service, create leaderboards, and more.
 * @section docs Native SDK Documentation
 * This document explains the SDK's application programming interface (API). Use the links at the
 * top of the page to navigate the documentation.
 * <p>
 * For more information about the Native SDK, see the
 * <a href="https://docs.mobage.com/display/WWNATIVE/iOS+Native+SDK+Landing">Programming Guide</a>
 * and the <code>README</code> file packaged with the SDK.
 */

/**
 * @file MBMobage.h
 * Initialize the Mobage service.
 * @since 1.5
 */

/**
 * Enumeration of Mobage server environments that an app can use.
 * @since 1.5
 */
typedef enum MBServerEnvironment {
    /**
     * Production environment. Use this environment when you are ready to submit your app to Mobage
     * for publication on the App Store.
     * @since 1.5
     */
    kMBServerEnvironmentProduction,
    /**
     * Sandbox environment. Use this environment for testing your app.
     * @since 1.5
     */
    kMBServerEnvironmentSandbox
} MBServerEnvironment;

typedef enum MBServerStage {
	kMBServerStageProduction,
	kMBServerStageStaging,
	kMBServerStageIntegration,
	kMBServerStageUnitTests,
	kMBServerStageTesting
} MBServerStage;

@class MBMobage;//Forward declare so sharedInstance class method can return concrete type

/**
 * Initialize the Mobage service, and manage user sessions.
 * @since 1.5
 */
@protocol MBMobage <NSObject>
/**
 * Retrieve the current instance of the Mobage service.
 * @since 1.5
 */
+ (MBMobage *) sharedInstance; 

@property (nonatomic, readwrite, strong) NSString * appId;
@property (nonatomic, readwrite, strong) NSString * appVersion;
@property (nonatomic, readwrite, strong) NSString * consumerKey;
@property (nonatomic, readwrite, strong) NSString * consumerSecret;

/**
 * The analytics event reporter, which enables your app to report Mobage
 * analytics events.
 * @since 1.5
 */
@property (atomic, readonly, strong) NSObject<MBEventReporter> *analyticsEventReporter;

/**
 * Initialize the Mobage service, and report a Mobage analytics event indicating that 
 * the app has started. Call this method immediately after your app starts.
 * <p>
 * <strong>Important</strong>: Call this method only once.
 * @param serverEnvironment Indicates whether to connect to Mobage's sandbox or production
 *      environment. <strong>Important</strong>: Before you submit your app to Mobage for review,
 *      you must change this value to refer to Mobage's production environment.
 * @param appId The app ID, also known as the "app key." Generated by the
 *      <a href="https://developer.mobage.com/">Mobage Developer Portal</a>.
 * @param appVersion The app version.
 * @param consumerKey The app's OAuth key for accessing the Mobage service. Generated by the
 *      <a href="https://developer.mobage.com/">Mobage Developer Portal</a>.
 * @param consumerSecret The app's OAuth secret for accessing the Mobage service. Generated by the
 *      <a href="https://developer.mobage.com/">Mobage Developer Portal</a>.
 * @since 1.5
 */
+ (void) initializeMobageWithServerEnvironment: (MBServerEnvironment)serverEnvironment 
										 appId: (NSString*) appId
									appVersion: (NSString*) appVersion
								   consumerKey: (NSString*) consumerKey
								consumerSecret: (NSString*) consumerSecret;


//+ (void) tryReestablishSession:( void (^)( BOOL sessionEstablished ) )onCompletion 
//					   onError:( void (^)( MBError* error ) )errorCB;

// deprecated in 2.0; no longer needed
-(void)onPause;
// deprecated in 2.0; no longer needed
-(void)onResume;
// deprecated in 2.0; no longer needed
-(void)onStop;

+ (void) getSDKVersionWithCallbackQueue:(dispatch_queue_t)cbQueue
							 onComplete:(void (^)(MBSimpleAPIStatus status, NSObject<MBError> *error, NSString *sdkVersion)) completeCB;

/**
 * Retrieve the Native SDK's version number, in the format
 * <code>Major.Minor.Hotfix.Patch</code> (for example, <code>2.0.1.0</code>).
 * @return The Native SDK's version number.
 * @since 1.5
 */
-(NSString *)getSDKVersion;
-(BOOL)checkLoginStatus;


@property (nonatomic, retain) NSMutableArray *openURLListeners;

// Asks the delegate to open a resource identified by URL.
+ (BOOL) openURL:(NSURL *)url
    sourceApplication:(NSString *)sourceApplication
        annotation:(id)annotation;

// Device token for Mobage remote notification server
@property (atomic, readwrite, strong) NSData * deviceToken;

/**
 * Retrieve the Mobage Vendor ID, which is a unique identifier for the device running your app.
 * The identifier is unique across devices for apps published on Mobage.
 * @return A Mobage Vendor ID.
 * @since 2.4
 */
+ (NSString *)getMobageVendorId;
+ (void)getMobageVendorIdWithCallbackQueue:(dispatch_queue_t)cbQueue
								onComplete:(void(^)(MBSimpleAPIStatus status, NSObject<MBError> *error, NSString* mvid))completeCb;

#pragma mark - Deprecated
@optional
+ (void) loginWithExistingSessionWithCallbackQueue:(dispatch_queue_t)cbQueue
										 onSuccess:( void (^)( BOOL sessionEstablished ) )successCB
										   onError:( void (^)( MBError* error ) )errorCB			__attribute__((deprecated)) /*Deprecated in 1.9*/;
@end

@interface MBMobage : NSObject <MBMobage>

@end

#import "MBMobage+Notifications.h"

